#!/usr/bin/python3
# ~/dev/py/ringd/ring_daemon

""" Daemon component of the ringd package. """

import os
#import re
import sys
import time
from argparse import ArgumentParser

from optionz import dump_options
# import upax
from xlattice import (check_hashtype,       # HashTypes,
                      parse_hashtype_etc, fix_hashtype, check_u_path)
from ringd import(__version__, __version_date__, RINGD_APP_DIR,
                  RINGD_APP_NAME, RING_HOST_INFO_FILE, RINGD_PORT)


def invoke_the_daemon(options):
    """ XXX STUB XXX """
    _ = options


def main():
    """ Set up options for the ring daemon. """

    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser('daemon participating in the house ring')

    parser.add_argument('-a', '--app_dir', default=RINGD_APP_DIR,
                        help='where we keep daemon data')

#   parser.add_argument('-e', '--ec2_host',      action='store_true',
#           help='set if machine is in EC2')

    parser.add_argument('-H', '--host_info_file', default=RING_HOST_INFO_FILE,
                        help='base name of the file')

    # XXX UTILITY?
#   parser.add_argument('-i', '--in_dir',       default='NO_SUCH_DIRECTORY',
#           help='path to input directory (forced to ./ testIn if testing)')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show args and exit')

    parser.add_argument('-L', '--log_dir', default='logs',
                        help='path to log directory')

    parser.add_argument('-n', '--app_name', default=RINGD_APP_NAME,
                        help='name of the ringd configuration subdirectory')

    parser.add_argument('-p', '--port', default=RINGD_PORT,
                        help='port the daemon listens on')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./testU')

    parser.add_argument('-t', '--show_timestamp', action='store_true',
                        help='show run timestamp')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version number and date')

    parser.add_argument('-z', '--no_changes', action='store_true',
                        help="don't actually write anything to disk")

    parse_hashtype_etc(parser)

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    fix_hashtype(args)

    args.pgm_name_and_version = "%s v%s %s" % (args.app_name,
                                               __version__, __version_date__)

    # the order of these statements is significant --------
    if args.testing:
        args.app_dir = 'myApps'
    args.config_dir = os.path.join(args.app_dir, args.app_name)
    args.path_to_host_info = os.path.join(args.config_dir, args.host_info_file)
    args.log_dir = os.path.join(args.config_dir, args.log_dir)
    # end ordered statements ------------------------------

    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    check_hashtype(args.hashtype)
    check_u_path(parser, args, must_exist=True)
    if not os.path.exists(args.app_dir):
        print("app directory '%s' does not exist" % args.app_dir)
        sys.exit(1)

    if not os.path.exists(args.config_dir):
        print("config directory '%s' does not exist" % args.config_dir)
        sys.exit(1)

    if not os.path.exists(args.log_dir):
        os.mkdir(args.log_dir)

    u_path_parts = args.u_path.split('/')
    if len(u_path_parts) > 1:
        print("uPath may not contain any slashes: aborting")
        sys.exit(1)

    # fixups --------------------------------------------------------
    args.u_path = os.path.join(args.config_dir, args.u_path)
    check_u_path(parser, args)        # create uDir if it doesn't exist

    if args.just_show or args.verbose:
        print(dump_options(args))

    # -- do it ------------------------------------------------------
    if not args.just_show:
        args.isClient = False
        invoke_the_daemon(args)


if __name__ == '__main__':
    main()
